package model.entity;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Dec 03 10:11:50 BDT 2020
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxOmSizewiseLTEOImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        LineId {
            public Object get(XxOmSizewiseLTEOImpl obj) {
                return obj.getLineId();
            }

            public void put(XxOmSizewiseLTEOImpl obj, Object value) {
                obj.setLineId((Number)value);
            }
        },
        HeaderId {
            public Object get(XxOmSizewiseLTEOImpl obj) {
                return obj.getHeaderId();
            }

            public void put(XxOmSizewiseLTEOImpl obj, Object value) {
                obj.setHeaderId((Number)value);
            }
        },
        SizeName {
            public Object get(XxOmSizewiseLTEOImpl obj) {
                return obj.getSizeName();
            }

            public void put(XxOmSizewiseLTEOImpl obj, Object value) {
                obj.setSizeName((String)value);
            }
        },
        Qty {
            public Object get(XxOmSizewiseLTEOImpl obj) {
                return obj.getQty();
            }

            public void put(XxOmSizewiseLTEOImpl obj, Object value) {
                obj.setQty((Number)value);
            }
        },
        CreatedBy {
            public Object get(XxOmSizewiseLTEOImpl obj) {
                return obj.getCreatedBy();
            }

            public void put(XxOmSizewiseLTEOImpl obj, Object value) {
                obj.setCreatedBy((Number)value);
            }
        },
        CreationDate {
            public Object get(XxOmSizewiseLTEOImpl obj) {
                return obj.getCreationDate();
            }

            public void put(XxOmSizewiseLTEOImpl obj, Object value) {
                obj.setCreationDate((Date)value);
            }
        },
        LastUpdatedBy {
            public Object get(XxOmSizewiseLTEOImpl obj) {
                return obj.getLastUpdatedBy();
            }

            public void put(XxOmSizewiseLTEOImpl obj, Object value) {
                obj.setLastUpdatedBy((Number)value);
            }
        },
        LastUpdatedDate {
            public Object get(XxOmSizewiseLTEOImpl obj) {
                return obj.getLastUpdatedDate();
            }

            public void put(XxOmSizewiseLTEOImpl obj, Object value) {
                obj.setLastUpdatedDate((Date)value);
            }
        },
        BpoId {
            public Object get(XxOmSizewiseLTEOImpl obj) {
                return obj.getBpoId();
            }

            public void put(XxOmSizewiseLTEOImpl obj, Object value) {
                obj.setBpoId((Number)value);
            }
        },
        XxOmBpoInfoTEO {
            public Object get(XxOmSizewiseLTEOImpl obj) {
                return obj.getXxOmBpoInfoTEO();
            }

            public void put(XxOmSizewiseLTEOImpl obj, Object value) {
                obj.setXxOmBpoInfoTEO((XxOmBpoInfoTEOImpl)value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(XxOmSizewiseLTEOImpl object);

        public abstract void put(XxOmSizewiseLTEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int LINEID = AttributesEnum.LineId.index();
    public static final int HEADERID = AttributesEnum.HeaderId.index();
    public static final int SIZENAME = AttributesEnum.SizeName.index();
    public static final int QTY = AttributesEnum.Qty.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int LASTUPDATEDBY =
        AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDDATE =
        AttributesEnum.LastUpdatedDate.index();
    public static final int BPOID = AttributesEnum.BpoId.index();
    public static final int XXOMBPOINFOTEO =
        AttributesEnum.XxOmBpoInfoTEO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public XxOmSizewiseLTEOImpl() {
    }

    /**
     * Gets the attribute value for LineId, using the alias name LineId.
     * @return the LineId
     */
    public Number getLineId() {
        return (Number)getAttributeInternal(LINEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for LineId.
     * @param value value to set the LineId
     */
    public void setLineId(Number value) {
        setAttributeInternal(LINEID, value);
    }

    /**
     * Gets the attribute value for HeaderId, using the alias name HeaderId.
     * @return the HeaderId
     */
    public Number getHeaderId() {
        return (Number)getAttributeInternal(HEADERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for HeaderId.
     * @param value value to set the HeaderId
     */
    public void setHeaderId(Number value) {
        setAttributeInternal(HEADERID, value);
    }

    /**
     * Gets the attribute value for SizeName, using the alias name SizeName.
     * @return the SizeName
     */
    public String getSizeName() {
        return (String)getAttributeInternal(SIZENAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for SizeName.
     * @param value value to set the SizeName
     */
    public void setSizeName(String value) {
        setAttributeInternal(SIZENAME, value);
    }

    /**
     * Gets the attribute value for Qty, using the alias name Qty.
     * @return the Qty
     */
    public Number getQty() {
        return (Number)getAttributeInternal(QTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Qty.
     * @param value value to set the Qty
     */
    public void setQty(Number value) {
        setAttributeInternal(QTY, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the CreatedBy
     */
    public Number getCreatedBy() {
        return (Number)getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(Number value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreationDate, using the alias name CreationDate.
     * @return the CreationDate
     */
    public Date getCreationDate() {
        return (Date)getAttributeInternal(CREATIONDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreationDate.
     * @param value value to set the CreationDate
     */
    public void setCreationDate(Date value) {
        setAttributeInternal(CREATIONDATE, value);
    }

    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the LastUpdatedBy
     */
    public Number getLastUpdatedBy() {
        return (Number)getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedBy.
     * @param value value to set the LastUpdatedBy
     */
    public void setLastUpdatedBy(Number value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**
     * Gets the attribute value for LastUpdatedDate, using the alias name LastUpdatedDate.
     * @return the LastUpdatedDate
     */
    public Date getLastUpdatedDate() {
        return (Date)getAttributeInternal(LASTUPDATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedDate.
     * @param value value to set the LastUpdatedDate
     */
    public void setLastUpdatedDate(Date value) {
        setAttributeInternal(LASTUPDATEDDATE, value);
    }

    /**
     * Gets the attribute value for BpoId, using the alias name BpoId.
     * @return the BpoId
     */
    public Number getBpoId() {
        return (Number)getAttributeInternal(BPOID);
    }

    /**
     * Sets <code>value</code> as the attribute value for BpoId.
     * @param value value to set the BpoId
     */
    public void setBpoId(Number value) {
        setAttributeInternal(BPOID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity XxOmBpoInfoTEOImpl.
     */
    public XxOmBpoInfoTEOImpl getXxOmBpoInfoTEO() {
        return (XxOmBpoInfoTEOImpl)getAttributeInternal(XXOMBPOINFOTEO);
    }

    /**
     * Sets <code>value</code> as the associated entity XxOmBpoInfoTEOImpl.
     */
    public void setXxOmBpoInfoTEO(XxOmBpoInfoTEOImpl value) {
        setAttributeInternal(XXOMBPOINFOTEO, value);
    }

    /**
     * @param lineId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number lineId) {
        return new Key(new Object[] { lineId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject =
                    EntityDefImpl.findDefObject("model.entity.XxOmSizewiseLTEO");
        }
        return mDefinitionObject;
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        try {
            super.create(attributeList);
            oracle.jbo.server.SequenceImpl s =
                new oracle.jbo.server.SequenceImpl("XX_om_sizewise_l_seq",
                                                   getDBTransaction());
            oracle.jbo.domain.Number sVal = s.getSequenceNumber();
            setLineId(sVal);
            System.out.println("Recently Created Line Id: " + sVal);
            // setTdate((Date)Date.getCurrentDate());
        } catch (Exception e) {
            e.printStackTrace();
        }


    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}
